SELECT [ALL | DISTINCT] список_столбцов|*
FROM список_имён_таблиц
[WHERE условие_поиска]
[GROUP BY список_имён_столбцов]
[HAVING условие_поиска]
[ORDER BY имя_столбца [ASC | DESC],…]

=========================================================================================================================================================


SELECT
    столбец1 AS новое_название,
    столбец2,
    АГРЕГАТ(столбец3)
FROM таблица
WHERE (условие1 OR условие2)
    AND условие3
GROUP BY столбец1, столбец2
HAVING АГРЕГАТ(столбец3) > 5
ORDER BY сортировка1, сортировка2
OFFSET 1 LIMIT 2
=========================================================================================================================================================

Задание 6.2

Напишите запрос, который выведет основной и дополнительный типы покемонов и средние значения по каждому показателю (столбцы avg_hp, avg_attack, avg_defense, avg_speed).
Оставьте только те пары типов, у которых сумма этих четырёх показателей более 400.

SELECT
    type1,
    type2,
    AVG(hp) AS avg_hp,
    AVG(attack) AS avg_attack,
    AVG(defense) AS avg_defense, 
    AVG(speed) AS avg_speed
FROM sql.pokemon
GROUP BY type1, type2
HAVING AVG(hp) + AVG(attack) + AVG(defense) + AVG(speed) > 400

=========================================================================================================================================================

Задание 6.3

Напишите запрос, который выведет столбцы с основным типом покемона и общим количеством покемонов этого типа.

Учитывайте только тех покемонов, у которых или показатель атаки, или показатель защиты принимает значение между 50 и 100 включительно.

Оставьте только те типы покемонов, у которых максимальный показатель здоровья не больше 125.

Выведите только тот тип, который находится на пятом месте по количеству покемонов.

SELECT
    type1,
    COUNT(*)
FROM sql.pokemon
WHERE (attack >= 50 AND attack <= 100) OR (defense >= 50 AND defense <= 100)
GROUP BY type1
HAVING MAX(hp) <= 125
ORDER BY COUNT(*) DESC
OFFSET 4
LIMIT 1

=========================================================================================================================================================
Задание 1.2

Напишите запрос, который выведет сезон (season), общее количество забитых мячей домашними (total_home_goals) и гостевыми (total_away_goals) командами.
Отсортируйте по столбцу с сезоном в порядке возрастания.

SELECT 
    season,
    SUM(home_team_goals) AS total_home_goals,
    SUM(away_team_goals) AS total_away_goals
FROM sql.matches
GROUP BY season
ORDER BY season


=========================================================================================================================================================
SELECT 
    h.long_name as "домашняя команда",
    m.home_team_goals as "голы домашней команды",
    m.away_team_goals as "голы гостевой команды",
    a.long_name as "гостевая команда"
FROM    
    sql.matches as m
JOIN sql.teams as h on m.home_team_api_id = h.api_id
JOIN sql.teams as a on m.away_team_api_id = a.api_id
=========================================================================================================================================================
Задание 3.2

Напишите запрос, который выведет два столбца: id матча (match_id) и id домашней команды (team_id), — а затем отсортируйте по id матча в порядке возрастания значений.

SELECT 
    m.id as match_id,
    t.id as team_id
FROM 
    sql.teams as t
JOIN sql.matches as m on m.home_team_api_id = t.api_id
ORDER BY m.id 

=========================================================================================================================================================
Задание 3.3

Напишите запрос, который выведет столбцы: id матча, короткое название домашней команды (home_short), короткое название гостевой команды (away_short).
Отсортируйте запрос по возрастанию id матча.

SELECT 
    m.id,
    h.short_name as home_short,
    a.short_name as away_short
    
FROM 
    sql.matches as m
JOIN sql.teams as h on m.home_team_api_id = h.api_id
JOIN sql.teams as a on m.away_team_api_id = a.api_id
ORDER BY m.id 

=========================================================================================================================================================

SELECT 
    t.long_name,
    SUM(home_team_goals) + SUM(away_team_goals) match_goals
    
    
FROM 
    sql.matches as m
    join sql.teams t on m.home_team_api_id = t.api_id
group by t.id
=========================================================================================================================================================
Например, можно вывести id матчей, в которых команда Arsenal была гостевой.

SELECT 
    m.id
FROM
    sql.teams t
    JOIN sql.matches m ON m.away_team_api_id = t.api_id
WHERE long_name = 'Arsenal'
=========================================================================================================================================================
Задание 4.1

Напишите запрос, который выведет полное название команды (long_name), количество голов домашней команды (home_goal) и количество голов гостевой команды (away_goal) в матчах, где домашней командой были команды с коротким названием ‘GEN’.
Отсортируйте запрос по id матча в порядке возрастания.

SELECT 
    t.long_name,
	m.home_team_goals home_goal,
	m.away_team_goals away_goal
FROM
	sql.teams t
JOIN sql.matches m ON m.home_team_api_id = t.api_id
WHERE t.short_name = 'GEN'
ORDER BY m.id
=========================================================================================================================================================
Задание 4.2

Напишите запрос, чтобы вывести id матчей, короткое название домашней команды (home_short), короткое название гостевой команды (away_short) для матчей сезона 2011/2012, в которых участвовала команда с названием Liverpool.
Отсортируйте по id матча в порядке возрастания.

SELECT 
    m.id,
    h.short_name home_short,
    a.short_name away_short
FROM    
    sql.matches m
    JOIN sql.teams h on h.api_id = m.home_team_api_id
    JOIN sql.teams a on a.api_id = m.away_team_api_id

WHERE (m.season = '2011/2012' AND (a.long_name = 'Liverpool' OR h.long_name = 'Liverpool'))

ORDER BY m.id

=========================================================================================================================================================
Задание 4.3

Напишите запрос, с помощью которого можно вывести список полных названий команд, сыгравших в гостях 150 и более матчей.
Отсортируйте список по названию команды.

SELECT 
    t.long_name
FROM sql.matches m
JOIN sql.teams t ON t.api_id = m.away_team_api_id
GROUP BY t.id
HAVING COUNT(m.id) >= 150
ORDER BY t.long_name
=========================================================================================================================================================
Задание 5.1

Используя LEFT JOIN, выведите список уникальных названий команд, содержащихся в таблице matches. Отсортируйте список в алфавитном порядке.
В поле ниже введите запрос, с помощью которого вы решили задание.

select 
    distinct t.long_name
from
    sql.matches m
    left join sql.teams t on m.home_team_api_id = t.api_id or m.away_team_api_id = t.api_id
order by t.long_name

=========================================================================================================================================================
Задание 5.2

Используя LEFT JOIN, напишите запрос, который выведет полное название команды (long_name), количество матчей, в которых участвовала команда, — домашних и гостевых (matches_cnt).
Отсортируйте по количеству матчей в порядке возрастания, затем по названию команды в алфавитном порядке.

select 
    t.long_name,
    count(m.id) matches_cnt
from
    sql.teams t
    left join sql.matches m on m.home_team_api_id = t.api_id or m.away_team_api_id = t.api_id
group by t.id
order by matches_cnt, t.long_name

=========================================================================================================================================================
Задание 5.3

Напишите запрос, который выведет все возможные уникальные комбинации коротких названий домашней команды (home_team) и коротких названий гостевой команды (away_team).
Отсортируйте запрос по первому и второму столбцам.

select
distinct
    t1.short_name home_team,
    t2.short_name away_team


from 
    sql.teams t1
    cross join sql.teams t2
order by t1.short_name, t2.short_name
=========================================================================================================================================================
Задание 6.1

Напишите запрос, который выведет список уникальных полных названий команд (long_name), игравших в гостях в матчах сезона 2012/2013.
Отсортируйте список в алфавитном порядке.

select
distinct
    t.long_name


from 
    sql.teams t
    join sql.matches m on m.away_team_api_id = t.api_id
where m.season = '2012/2013'
    
order by t.long_name
=========================================================================================================================================================
Задание 6.2

Напишите запрос, который выведет полное название команды (long_name) и общее количество матчей (matches_cnt), сыгранных командой Inter в домашних матчах.
select

    t.long_name,
    count(m.id) matches_cnt
from 
    sql.teams t
    join sql.matches m on m.home_team_api_id = t.api_id

where t.long_name = 'Inter'
group by t.long_name

order by t.long_name

=========================================================================================================================================================
Задание 6.3

Напишите запрос, который выведет ТОП-10 команд (long_name) по суммарному количеству забитых голов в гостевых матчах. Во втором столбце запроса выведите суммарное количество голов в гостевых матчах (total_goals).

select

    t.long_name,
    sum(m.away_team_goals) total_goals

from 
    sql.teams t
    join sql.matches m on m.away_team_api_id = t.api_id

group by t.id
    
order by total_goals desc
limit 10

=========================================================================================================================================================
Задание 6.4

Выведите количество матчей между командами Real Madrid CF и FC Barcelona.
В поле ниже введите запрос, с помощью которого вы решили задание.

select
    count(m.id)

from 
    sql.matches m
    join sql.teams a on m.away_team_api_id = a.api_id 
    join sql.teams h on m.home_team_api_id = h.api_id

where h.long_name in ('Real Madrid CF', 'FC Barcelona')
and a.long_name in ('Real Madrid CF', 'FC Barcelona')
and a.id != h.id
=========================================================================================================================================================
Задание 6.5

Напишите запрос, который выведет название команды (long_name), сезон (season) и суммарное количество забитых голов в домашних матчах (total_goals).
Оставьте только те строки, в которых суммарное количество голов менее десяти.
Отсортируйте запрос по названию команды, а затем — по сезону.

select
    t.long_name,
    m.season,
    sum(m.home_team_goals) total_goals

from 
    sql.matches m
    join sql.teams t on m.home_team_api_id = t.api_id
    
group by t.long_name, m.season
    having sum(m.home_team_goals) < 10

order by 
    t.long_name, m.season


=========================================================================================================================================================
Перед вами школьная таблица TABLE_A с оценками от 0 до 100, выставленными ученикам нескольких классов. 



Как бы вы рассчитали максимальную оценку в каждом классе?

select
    t."Класс",
    max(t."Оценка") --into table_b

from 
    table_a t
    
group by t."Класс"
   
order by 
    t."Класс"

=========================================================================================================================================================
Задание 1.1

→ Укажите название города с максимальным весом единичной доставки.
select
   c.city_name,
   max(s.weight)

from 
    sql.shipment s
    join sql.city c on c.city_id = s.city_id
group by c.city_name
order by max(s.weight) desc

→ Сколько различных производителей грузовиков перечислено в таблице truck?

select
    t.make,
    count(t.make)

from 
    sql.truck t
group by t.make

→ Как зовут водителя (first_name), который совершил наибольшее количество доставок одному клиенту?
select
    d.first_name,
    count(s.ship_id)
from 
    sql.shipment s
    join driver d on d.driver_id = s.driver_id
group by d.first_name, s.cust_id
order by count(s.ship_id) desc

→ Укажите даты первой и последней по времени доставок в таблице shipment.
Ответ введите в формате ДД.ММ.ГГГГ.

select
    min(s.ship_date),
    max(s.ship_date)
from 
    sql.shipment s


→ Укажите имя клиента, получившего наибольшее количество доставок за 2017 год.
select
    c.cust_name,
    count(s.ship_id)
from 
    sql.shipment s
    join sql.customer c on c.cust_id = s.cust_id
where s.ship_date between to_date('01.01.2017', 'dd.mm.yyyy') and to_date('31.12.2017', 'dd.mm.yyyy')
group by c.cust_name
order by count(s.ship_id) desc   


=========================================================================================================================================================
Задание 2.1

Напишите запрос, который создаёт уникальный алфавитный справочник всех городов, штатов, имён водителей и производителей грузовиков.
Результатом запроса должны быть два столбца: название и тип объекта (city, state, driver, truck).
Отсортируйте список по названию объекта, а затем — по типу.

select 
    c1.city_name "название",
    'city' "тип объекта"
from sql.city c1

union

select 
    c2.state,
    'state'
from sql.city c2

union

select 
    d.first_name,
    'driver'
from sql.driver d

union

select 
    t.make,
    'truck'
from sql.truck t

order by 1,2
    
    
=========================================================================================================================================================
Задание 2.2

Напишите запрос, который соберёт имена всех упомянутых городов и штатов с таблицы city.
Результатом запроса должен быть один столбец object_name, отсортированный в алфавитном порядке.

select 
    c1.city_name object_name

from sql.city c1

union all

select 
    c2.state
from sql.city c2

order by 1
=========================================================================================================================================================
Задание 2.3

Выполнив предыдущий запрос, мы получили города с одинаковыми названиями, но находящиеся в разных штатах, а также большое количество дублирующихся названий штатов.
Перепишите предыдущий запрос так, чтобы остались только уникальные названия городов и штатов.
Результатом запроса должен быть один столбец object_name, отсортированный в алфавитном порядке.

select 
    distinct c1.city_name object_name

from sql.city c1

union

select 
    c2.state
from sql.city c2


order by 1

=========================================================================================================================================================
Задание 3.1

Напишите запрос, который объединит в себе все почтовые индексы водителей и их телефоны в единый столбец-справочник. Также добавьте столбец с именем водителя и столбец с типом контакта (phone или zip в зависимости от типа).
Отсортируйте список по столбцу с контактными данными в порядке возрастания, а затем — по имени водителя.

select
    d.zip_code::text contact,
    d.first_name the_name,
    'zip' contact_type
from sql.driver d

union all

select
    dd.phone,
    dd.first_name,
    'phone' contact_type
from sql.driver dd
    

order by 1,2

=========================================================================================================================================================
Blank Advanced Problem

Напишите запрос, который выводит общее число доставок total_shipments, а также количество доставок в каждый день. Необходимые столбцы: date_period, cnt_shipping.
Не забывайте о единой типизации.
Упорядочьте по убыванию столбца date_period.

select
         s.ship_date::text date_period,
         count(s.ship_id) cnt_shipping
from
         sql.shipment s
group by s.ship_date

union all

select
         'total_shipments',
         count(s.ship_id)
from
         sql.shipment s
         
ORDER BY 1 DESC
=========================================================================================================================================================
Задание 5.1

Напишите запрос, который выведет все города и штаты, в которых они расположены, а также информацию о том, была ли осуществлена доставка в этот город:

если в город была осуществлена доставка, то выводим 'доставка осуществлялась';
если нет — выводим 'доставка не осуществлялась'.
Столбцы к выводу: city_name, state, shipping_status.

Отсортируйте в алфавитном порядке по городу, а затем — по штату.

select
    distinct c.city_name city_name,
    c.state state,
    'доставка не осуществлялась' shipping_status
from 
    sql.city c
    full outer join sql.shipment s on c.city_id = s.city_id
where s.ship_id is null

union

select
    distinct c.city_name city_name,
    c.state state,
    'доставка осуществлялась' shipping_status
from 
    sql.city c
    full outer join sql.shipment s on c.city_id = s.city_id
where s.ship_id is not null

order by 1,2
=========================================================================================================================================================
Задание 5.2

Напишите запрос, который выводит два столбца: city_name и shippings_fake. Выведите города, куда совершались доставки.

Пусть первый столбец содержит название города, а второй формируется так:

если в городе было более десяти доставок, вывести количество доставок в этот город как есть;
иначе — вывести количество доставок, увеличенное на пять.
Отсортируйте по убыванию получившегося «нечестного» количества доставок, а затем — по имени в алфавитном порядке.
select
    c.city_name,
    count(s.ship_id) shippings_fake
from 
    sql.shipment s 
    join sql.city c on c.city_id = s.city_id
group by c.city_name
    having count(s.ship_id) > 10

union all

select
    c.city_name,
    count(s.ship_id) + 5
from 
    sql.shipment s 
    join sql.city c on c.city_id = s.city_id
group by c.city_name
    having count(s.ship_id) <= 10

order by 2 desc, 1
    

=========================================================================================================================================================
Задание 6.1

Напишите запрос, который выберет наибольшее из значений:

1000000;
541;
-500;
100.

select
    1000000 numbers

union

select
    541

union

select
    -500
    
union

select
    100
    
order by 1 desc
limit 1
=========================================================================================================================================================
Задание 6.2

Мы помним, что сортировка для числовых и строковых типов данных отличается.

Построив запрос по аналогии с примером, приведите значения к текстовому типу данных, сравните и выберите наибольшее из них:
1000000;
541;
-500;
100.
select
    1000000::text numbers

union

select
    541::text

union

select
    (-500)::text
    
union

select
    100::text
    
order by 1 desc
limit 1

=========================================================================================================================================================
Задание 6.3

Построив запрос по аналогии с примером, найдите самое большое значение из перечисленных операторов:

+ ;
- ;
= ;
/ .

select
    '+' numbers

union

select
    '-'

union

select
    '='
    
union

select
    '/'
    
order by 1 desc
limit 1

=========================================================================================================================================================
Задание 7.1

Выведите список zip-кодов, которые есть в таблице sql.driver, но отсутствуют в таблице sql.customer. Отсортируйте по возрастанию, столбец к выводу — zip.
select
   d.zip_code zip
from 
    sql.driver d

except

select
    c.zip
from    
    sql.customer c

order by 1
=========================================================================================================================================================
Задание 8.1

Напишите запрос, который выведет список id городов, в которых есть и клиенты, и доставки, и водители.
select
    c.city_id
from 
    sql.customer c
    
intersect

select
    s.city_id
from 
    sql.shipment s
    
intersect

select
    d.city_id
from 
    sql.driver d
=========================================================================================================================================================
Задание 8.2

Выведите zip-код, который есть как в таблице с клиентами, так и в таблице с водителями.
select
    c.zip
from 
    sql.customer c
    
intersect

select
    d.zip_code
from 
    sql.driver d
=========================================================================================================================================================
Задание 9.1

Выведите города с максимальным и минимальным весом единичной доставки.
Столбцы к выводу — city_name, weight.
(select
    c.city_name city_name, 
    s.weight weight
from 
    sql.shipment s
    join sql.city c on c.city_id = s.city_id
order by s.weight desc
limit 1)

union

(select
    c.city_name,
    s.weight
from 
    sql.shipment s
    join sql.city c on c.city_id = s.city_id
order by s.weight asc
limit 1)
=========================================================================================================================================================
Задание 9.2

Выведите идентификационные номера клиентов (cust_id), которые совпадают с идентификационными номерами доставок (ship_id).
Столбец к выводу — mutual_id.
Отсортируйте по возрастанию.

select
    c.cust_id mutual_id
from 
    sql.customer c
    
intersect

select
    s.ship_id
from 
    sql.shipment s
order by 1
=========================================================================================================================================================
Задание 9.3

Создайте справочник, содержащий уникальные имена клиентов, которые являются производителями (cust_type='manufacturer'), и производителей грузовиков, а также описание объекта — 'КЛИЕНТ' или 'ГРУЗОВИК'.
Столбцы к выводу — object_name, object_description.
Отсортируйте по названию в алфавитном порядке.
select
    c.cust_name object_name,
    'КЛИЕНТ' object_description
from 
    sql.customer c
where c.cust_type = 'manufacturer'

union

select
    t.make,
    'ГРУЗОВИК'
from 
    sql.truck t
order by 1
=========================================================================================================================================================
Задание 3.1

Давайте узнаем, сколько сейчас времени в другом регионе, например в Лос-Анджелесе.

Напишите запрос, который выведет текущие время и дату в часовом поясе Лос-Анджелеса ("America/Los_Angeles").
Столбец в выдаче — now (время и дата в нужном часовом поясе).
select now() at time zone 'America/Los_Angeles' now
=========================================================================================================================================================
Задание 3.2

Предположим, у нас есть дата и время какого-то события и мы хотим посмотреть, к какой дате оно относится для Москвы и для UTC.

Используйте подзапрос

with x as 
(
select '2018-12-31 21:00:00+00'::timestamp with time zone ts
)
и выведите дату в ts в Московском часовом поясе и в поясе UTC.

Столбцы в выдаче: dt_msk (дата в московском часовом поясе), dt_utc (дата в UTC).

with x as 
(
select '2018-12-31 21:00:00+00'::timestamp with time zone at time zone 'Europe/Moscow' as dt_msk,
'2018-12-31 21:00:00+00'::timestamp with time zone as dt_utc
)
select 
    dt_msk::date,
    dt_utc::date 
from x
=========================================================================================================================================================

Задание 4.1

Давайте посчитаем помесячную статистику по доставкам, используя функцию extract().
Напишите запрос, который выведет год, месяц и количество доставок.
Отсортируйте по году и по месяцу в порядке возрастания.
Столбцы в выдаче: year_n (номер года), month_n (номер месяца), qty (количество доставок).

select
    extract(year from(s.ship_date)) as year_n, 
    extract(month from(s.ship_date)) as month_n, 
    count(s.ship_id) as qty
from 
    sql.shipment s
group by extract(year from(s.ship_date)), extract(month from(s.ship_date)) 

order by extract(year from(s.ship_date)), extract(month from(s.ship_date)) 
=========================================================================================================================================================
Задание 4.2

Давайте выведем текст текущего времени для сервиса точного времени.
Напишите запрос, который выводит текст "Точное время x часов y минут z секунд" (текст в кавычки заключать не нужно), где x, y, z — часы, минуты и секунды соответственно, при условии, что сообщение нужно вывести для московского часового пояса.
Время введите в 24-часовом формате.
Столбцы в выдаче: msg (сообщение).
select to_char(now() at time zone 'Europe/Moscow','Точное время HH24 часов MI минут SS секунд')
=========================================================================================================================================================
Задание 4.3

Давайте подготовим данные для квартальной отчётности компании.
Напишите запрос, который выведет дату доставки, округлённую до квартала, и общую массу доставок.
Отсортируйте по кварталу в порядке возрастания.
Столбцы в выдаче: q (начало квартала, тип date), total_weight (сумма масс доставок за квартал).
 select 
    date_trunc('quarter', s.ship_date) as q, 
    sum(s.weight) total_weight
from sql.shipment s

group by date_trunc('quarter', s.ship_date)
order by date_trunc('quarter', s.ship_date)
=========================================================================================================================================================
Задание 4.4

Давайте оценим, в каком интервале совершались доставки в разных городах.
Напишите запрос, который выведет разницу между последним и первым днём доставки по каждому городу.
Отсортируйте по первому и второму столбцам.
Столбцы в выдаче: city_name (название города) и days_active (время от первой до последней доставки в днях).
 select 
    c.city_name city_name,
    max(s.ship_date) - min(s.ship_date) days_active
 
from sql.shipment s
join sql.city c on c.city_id = s.city_id

group by c.city_name
order by 1, 2
=========================================================================================================================================================
Задание 6.1

Составим текстовый шаблон сообщения о доставке по конкретному водителю для наших клиентов.

Напишите SQL-запрос, который выведет следующее сообщение для каждого водителя по форме:
Ваш заказ доставит водитель #Имя Фамилия#. Его контактный номер: #Номер#, где #Имя Фамилия# и #Номер# взяты из справочника водителей.
Если номер не указан, то выведите прочерк (-). Для номеров рекомендуем использовать coalesce.

Пример из таблицы для наглядности:
Ваш заказ доставит водитель Adel Al-Alawi. Его контактный номер: (901) 947-4433

Столбец к выдаче — msg (текст сообщения).
select 'Ваш заказ доставит водитель '|| d.first_name || ' ' || d.last_name||  '. Его контактный номер: '|| coalesce(d.phone) msg
from sql.driver d
where d.phone is not null
union all
select 'Ваш заказ доставит водитель '|| d.first_name || ' ' || d.last_name|| '. Его контактный номер: '|| '-' msg
from sql.driver d
where d.phone is null
=========================================================================================================================================================
Задание 6.2

Cоставим справочник названий клиентов, у которых более десяти доставок. Данные сохраним в нижнем регистре, чтобы передавать их в другие системы (например, для обзвона), которые не чувствительны к регистру.

Напишите запрос, который выводит все id названий клиентов, у которых более десяти доставок, в нижнем регистре. Отсортируйте результат по cust_id в порядке возрастания.
Столбцы в выдаче: cust_id (id клиента) и cust_name (название клиента в нижнем регистре).
select 
    c.cust_id,
    lower(c.cust_name) cust_name    
from sql.customer c
join sql.shipment s on c.cust_id = s.cust_id

group by c.cust_id
having count(s.ship_id) > 10
order by c.cust_id
=========================================================================================================================================================
Задание 6.3

Составим справочник utm-меток, для того чтобы передавать город и штат прямо в адресной строке. (Если вы не знаете, что такое utm-метка, почитайте статью на Вики. К программе курса это не относится, но знать полезно.)

Напишите SQL-запрос, который выведет список сочетаний из справочника следующего вида: название_штата__название_города, где названия штата и города взяты из справочника городов и переведены в нижний регистр.
Столбец к выдаче — utm (форматированный штат-город).
Отсортируйте полученный справочник по алфавиту.

Обратите внимание! Все пробелы в названиях городов и штатов замените символом '_' (одно нижнее подчёркивание), а для разделения названий города и штата используйте '__' (два последовательных нижних подчёркивания).

Пример из таблицы для наглядности: new_jersey__union_city
select 
    lower(replace(c.state, ' ','_' )||'__'|| replace(c.city_name, ' ','_')) utm  
from sql.city c

order by 1
=========================================================================================================================================================
Задание 6.4

Представим, что к вам пришёл разработчик, который хочет сократить поле state в таблице city до четырёх символов, и попросил проверить, останутся ли значения в нём уникальными.

Чтобы ответить на этот вопрос, напишите SQL-запрос, который выведет первые четыре символа названия штата, и количество уникальных названий штатов, которому они соотвествуют. Оставьте только те, которые относятся к двум и более штатам.
Добавьте сортировку по первому столбцу.
Столбцы в выдаче: code (четыре первых буквы штата), qty (количество уникальных названий штата, начинаюшихся на эти буквы).
select
    distinct left(c.state, 4) code, 
    count(distinct c.state) qty
from sql.city c

group by left(c.state, 4)

order by 1
=========================================================================================================================================================
Задание 6.5

Давайте подготовим географическую сводку для каждого города.

Напишите SQL-запрос, который выведет описание региона в следующем формате: [city_name] is located in [state]. There's [population] people living there. Its area is [area] (обратите внимание, точку в конце ставить не нужно).
Отсортируйте по названию города в алфавитном порядке.
Столбец к выдаче — str (сводка).

Пример: Abilene is located in Texas. There's 115930 people living there. Its area is 105.10

select 
    format($$%s is located in %s. Theres %s people living there. Its area is %s$$, c.city_name, c.state, c.population, c.area) str
from sql.city c
order by c.city_name
=========================================================================================================================================================

=========================================================================================================================================================

=========================================================================================================================================================
=========================================================================================================================================================
=========================================================================================================================================================
Задание 09-1

Составьте список книжных новинок. Новинками считаются все книги за последние пять лет.

Необходимые данные:

название книги;
год издания;
автор;
жанр.
Вывод отсортируйте по названиям книг.

select
   book_name "название книги",
   publishing_year "год издания",
   author "автор",
   genre "жанр"
from 
    other.books
where publishing_year >= 2016

order by book_name
=========================================================================================================================================================
Задание 09-2

Отфильтруйте запрос из предыдущего задания так, чтобы остались только те книги, у которых есть название.
select
   book_name,
   publishing_year,
   author,
   genre
from 
    other.books
where publishing_year >= 2016 and book_name is not null
order by book_name
=========================================================================================================================================================
Задание 09-3

Выберите значения рейтинга авторов, имеющиеся в нашей базе. Отсортируйте вывод по алфавиту.

select
   author_rating
from 
    other.books
group by author_rating

order by author_rating
=========================================================================================================================================================
Задание 09-4

Возьмём для рекламного буклета только книги отличных авторов!
Оставьте в выборке новых книг только авторов с рейтингом 'Excellent'.

select
   book_name,
   publishing_year,
   author,
   genre
from 
    other.books
where publishing_year >= 2016 and book_name is not null and author_rating = 'Excellent'
order by book_name
=========================================================================================================================================================
Задание 09-5

Добавьте в имеющуюся выборку известных авторов (со значением рейтинга 'Famous').
select
   book_name,
   publishing_year,
   author,
   genre
from 
    other.books
where publishing_year >= 2016 and book_name is not null and author_rating in ('Excellent', 'Famous')
order by book_name
=========================================================================================================================================================
Задание 09-6
1 point possible (graded)
Определите, сколько книг из выборки для рекламы попадает в каждую категорию рейтинга автора.

Нам понадобятся следующие данные:

рейтинг автора (author_rating);
количество книг (cnt).
Сортировка, как всегда, по алфавиту.

select
   author_rating,
   count(book_name) cnt
from 
    other.books
where publishing_year >= 2016 and book_name is not null
group by author_rating
order by author_rating
=========================================================================================================================================================
Задание 09-7

Выбираем книги с рейтингом автора отличный (Excellent), известный (Famous) и новый (Novice). И в конце добавим строку об общем количестве книг.
В выборке нас по-прежнему интересуют
название книги,
год издания,
автор,
жанр.
В итоге у вас должна получиться выборка следующего вида:

(select
   book_name,
   publishing_year,
   author,
   genre
from 
    other.books
where publishing_year >= 2016 and book_name is not null and author_rating in ('Excellent', 'Famous', 'Novice')
order by book_name)

union all

select
    'Total', count(book_name), null, null
from 
    other.books
where publishing_year >= 2016 and book_name is not null and author_rating in ('Excellent', 'Famous', 'Novice')
=========================================================================================================================================================
Задание 09-8

Для начала выберите всю информацию о заказах книг, выпущенных не более 10 лет назад. Отсортируйте заказы по дате в обратном порядке.
select
  *
from 
    other.book_orders o 
    join other.books b on b.book_id = o.book_id
where publishing_year >= 2011 
order by o.order_date desc
=========================================================================================================================================================
Задание 09-9

Теперь оставим в выборке только заказы от 2019 года и позднее.
select
  *
from 
    other.book_orders o 
    join other.books b on b.book_id = o.book_id
where publishing_year >= 2011 and extract(year from(o.order_date)) >= 2019
order by o.order_date desc
=========================================================================================================================================================
Задание 09-10

Чтобы понять, заказы за какой период у нас есть, определите дату последнего заказа.
select
  max(order_date)
from 
    other.book_orders
=========================================================================================================================================================
Задание 09-11

Посчитайте общее количество заказов за каждый месяц (month). Отсортируйте вывод по месяцам в обратном порядке.
select
     extract(month from(o.order_date)) as month,
     count(o.order_id) as month
 
from 
    other.book_orders o 
    join other.books b on b.book_id = o.book_id
    
where publishing_year >= 2011 and extract(year from(o.order_date)) >= 2019
group by extract(month from(o.order_date))

order by extract(month from(o.order_date)) desc
=========================================================================================================================================================
Задание 09-12

Добавьте в предыдущий запрос подсчёт количества разных книг (cnt_dist), заказанных в каждом месяце.
select
     extract(month from(o.order_date)) as month,
     count(o.order_id) as month,
     count(distinct o.book_id) cnt_dist
 
from 
    other.book_orders o 
    join other.books b on b.book_id = o.book_id
    
where publishing_year >= 2011 and extract(year from(o.order_date)) >= 2019
group by extract(month from(o.order_date))

order by extract(month from(o.order_date)) desc
=========================================================================================================================================================
Задание 09-13

На основе предыдущего запроса создайте новый, чтобы вычислить, сколько раз заказывали каждую книгу в этом месяце.
Столбцы к выводу — order_month, book_name, cnt.
select
     extract(month from(o.order_date)) order_month,
     o.book_name book_name,
     count(*) cnt_dist
 
from 
    other.book_orders o 
    join other.books b on b.book_id = o.book_id
    
where publishing_year >= 2011 and extract(year from(o.order_date)) >= 2019
group by extract(month from(o.order_date)), o.book_name

order by extract(month from(o.order_date)) desc
=========================================================================================================================================================
Задание 09-14

Выберите топ-5 книг по заказам в каждом месяце.
Столбцы к выводу — order_month, book_name, cnt, rnk.
Отсортируйте вывод по месяцу в обратном порядке и по рангу.

with book_rnk as 
(select 
    extract(month from bo.order_date) as order_month, 
    b.book_name, 
    count(b.book_id) as cnt, 
    DENSE_RANK() over (partition by extract(month from bo.order_date) 
order by count(b.book_id) DESC) as rnk 

FROM other.book_orders bo 
join other.books b on bo.book_id = b.book_id 
where publishing_year >= 2011 and extract(year from(bo.order_date)) >= 2019
group by extract(month from(bo.order_date)), b.book_name)

select 
    *
from book_rnk 
where rnk <= 5 
order by order_month desc, rnk;
=========================================================================================================================================================

=========================================================================================================================================================

=========================================================================================================================================================

=========================================================================================================================================================


=========================================================================================================================================================

=========================================================================================================================================================

=========================================================================================================================================================

=========================================================================================================================================================

=========================================================================================================================================================

=========================================================================================================================================================



















